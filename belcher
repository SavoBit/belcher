#!/usr/bin/env python3
import argparse
# import datetime
# import json
import sys
import time
import urllib.parse

import requests
import yaml


DEFAULT_BASE = 'http://localhost:8090/'
PATHS = {
    'config': "/burp/configuration",
    'history': "/burp/proxy/history",
    'issues': "/burp/scanner/issues",
    'report': "/burp/report",
    'scan-active': "/burp/scanner/scans/active",
    'scan-passive': "/burp/scanner/scans/passive",
    'scan-status': "/burp/scanner/status",
    'sitemap': "/burp/target/sitemap",
    'spider': "/burp/spider",
    'spider-status': "/burp/spider/status",
    'stop': "/burp/stop",
    'target': "/burp/target/scope",
    # '': "/burp/versions" ,
}


class BurpAPIError(Exception):
    pass


def _get_error(response):
    '''Try to jsonify the response object and get the failure message;
    generic error message on failure.'''
    try:
        return response.json()['message']
    except Exception:
        return 'API error: ' + response.text


class BurpClient:
    def __init__(self, base_url=''):
        if not base_url:
            raise BurpAPIError('Missing base url')
        self.base_url = base_url

    def _resource_url(self, action):
        return urllib.parse.urljoin(self.base_url, PATHS[action])

    def target_in_scope(self, target):
        url = self._resource_url('target')
        params = {'url': target}
        resp = requests.get(url, params=params)
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))
        try:
            data = resp.json()
            return data['inScope']
        except Exception:
            raise BurpAPIError('Failed to parse response data: {}'.format(resp.text))

    def target_add(self, target):
        url = self._resource_url('target')
        data = {'url': target}
        resp = requests.put(url, data=data)
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))

    def issues(self, base=''):
        '''Return found issues as a dict. Provide base if you want the issues for only a
        specific prefix.'''
        url = self._resource_url('issues')
        resp = requests.get(url, params={'urlPrefix': base})
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))
        try:
            return resp.json()
        except Exception:
            raise BurpAPIError('Failed to parse response data: {}'.format(resp.text))

    def spider(self, target):
        '''Send a seed URL to the Burp spider (which queues it for spidering)'''
        url = self._resource_url('spider')
        data = {
            'baseUrl': target
        }
        resp = requests.post(url, data=data)
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))

    def spider_status(self):
        '''Return percentage as an int'''
        url = self._resource_url('spider-status')
        resp = requests.get(url)
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))
        try:
            data = resp.json()
            return int(data['spiderPercentage'])
        except Exception:
            raise BurpAPIError('Failed to parse response data: {}'.format(resp.text))

    def sitemap(self, base=''):
        '''Return the sitemap as a dict. Provide base if you want the map for only a
        specific prefix.'''
        url = self._resource_url('sitemap')
        resp = requests.get(url, params={'urlPrefix': base})
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))
        try:
            return resp.json()
        except Exception:
            raise BurpAPIError('Failed to parse response data: {}'.format(resp.text))

    def scan_active(self, target):
        url = self._resource_url('scan-active')
        resp = requests.post(url, data={'baseUrl': target})
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))

    def scan_passive(self, target):
        url = self._resource_url('scan-passive')
        resp = requests.post(url, data={'baseUrl': target})
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))

    def scan_status(self):
        '''Return percentage as an int'''
        url = self._resource_url('scan-status')
        resp = requests.get(url)
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))
        try:
            data = resp.json()
            return int(data['scanPercentage'])
        except Exception:
            raise BurpAPIError('Failed to parse response data: {}'.format(resp.text))

    def scan_stop(self):
        url = self._resource_url('scan-active')  # same endpoint, different method
        resp = requests.delete(url)
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))

    def report(self):
        url = self._resource_url('report')
        resp = requests.get(url)
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))
        return resp.text

    def stop(self):
        '''Stop Burp. This *fully stops* the burp process.'''
        url = self._resource_url('stop')
        resp = requests.get(url)
        if not resp.ok:
            raise BurpAPIError(_get_error(resp))

    def _add_to_sitemap(self, url):
        '''A Burp scan seems to only work if the target URL is
        - in scope
        - AND in the sitemap

        There's a direct way to add to scope, but adding to the sitemap requires
        spidering. So here's adding to the sitemap :eyeroll:'''
        self.target_add(url)
        self.spider(url)


def _yaml_to_urls(fname):
    with open(fname, 'r') as f:
        # unhandled exception: key error, whatever the yaml load errors can be
        return yaml.load(f)['paths']


def _wait_status(f, msg='Status', should_print=True):
    '''call the fn wait til it returns true... but it's obviously intended for the
    client lel idc. f should return an int in [0,100]

    f should return a msg and a bool status, True for done, False for not'''
    percentage = 0
    try:
        while percentage < 100:
            percentage = f()
            if should_print:
                print('{}: {}'.format(msg, percentage), end='\r')
            time.sleep(1)
        print()
    except KeyboardInterrupt:
        print()
        print('Caught keyboard interrupt. Note that the job may still be running!')


def report_cmd(client, args):
    with open(args.output_file, 'x') as f:
        report = client.report()
        if report:
            f.write(report)


def spider_cmd(client, args):
    if args.target_file:
        urls = _yaml_to_urls(args.target_file)
    else:
        urls = args.url or []

    for url in urls:
        client._add_to_sitemap(url)
        print('Sent {} to be spidered.'.format(url))

    if args.status:
        _wait_status(client.spider_status)


def scan_cmd(client, args):
    if args.target_file:
        urls = _yaml_to_urls(args.target_file)
    else:
        urls = args.url or []

    # TODO refactor
    for url in urls:
        # TODO check if it's in the sitemap first
        client._add_to_sitemap(url)
        print('Added {} to sitemap.'.format(url))
    # TODO flag: if didn't have to add to sitemap, skip this
    _wait_status(client.spider_status, msg='Spider status')

    for url in urls:
        if args.passive:
            client.scan_passive(url)
            print('Started passive scan on {}.'.format(url))
        else:
            client.scan_active(url)
            print('Started active scan on {}.'.format(url))

    if args.status:
        _wait_status(client.scan_status)


def issues_cmd(client, args):
    issues = client.issues(base=args.url)
    if args.output_file:
        with open(args.output_file, 'x') as f:
            yaml.dump(issues, f, allow_unicode=True)
    else:
        yaml.dump(issues, sys.stdout, allow_unicode=True)


def sitemap_cmd(client, args):
    sitemap = client.sitemap(base=args.url)
    if args.output_file:
        with open(args.output_file, 'x') as f:
            yaml.dump(sitemap, f, allow_unicode=True)
    else:
        yaml.dump(sitemap, sys.stdout, allow_unicode=True)


def stop_cmd(client, args):
    if args.shutdown:
        client.stop()
        print('Stopped Burp.')
    else:
        client.scan_stop()
        print('Stopped scan.')


if __name__ == '__main__':
    root = argparse.ArgumentParser(description='CLI for Burp Rest API')
    root.add_argument('-b', '--base', help='Base Burp server URL', metavar='base', type=str, default='')

    # lets us make subcommands
    subparsers = root.add_subparsers()

    spider = subparsers.add_parser('spider', help='Subcommands for the Burp spider')

    spider.add_argument('-u', '--url', help='Send a URL to the spider queue',
                        metavar='url', type=str, nargs='*')
    spider.add_argument('-t', '--target-file', help='YAML file of urls to spider',
                        metavar='base', type=str, default='')
    spider.add_argument('--status', help='Get the current spider status',
                        action='store_true')

    scan = subparsers.add_parser('scan', help='Subcommands for the Burp active scanner')
    scan.add_argument('-u', '--url', help='Target URL', metavar='url', type=str, nargs='*')
    scan.add_argument('-p', '--passive', help='Do a passive scan', action='store_true', default=False)
    scan.add_argument('-t', '--target-file', help='YAML file of urls to scan', metavar='base', type=str, default='')
    scan.add_argument('--spider', help='Spider the targets', action='store_true', default=False)
    scan.add_argument('--status', help='Get the current scanner status', action='store_true', default=False)

    issues = subparsers.add_parser('issues', help='Get the found issues')
    issues.add_argument('-u', '--url', help='Target URL', metavar='url', type=str, default='')
    issues.add_argument('-o', '--output-file', help='Output file', type=str)

    report = subparsers.add_parser('report', help='Get the scan report')
    report.add_argument('-o', '--output-file', help='Output file', type=str, required=True)

    sitemap = subparsers.add_parser('sitemap', help='Get the current sitemap')
    sitemap.add_argument('-u', '--url', help='Target URL', metavar='url', type=str, default='')
    sitemap.add_argument('-o', '--output-file', help='Output file', type=str)

    stop = subparsers.add_parser('stop', help='Stop various Burp processes (default stops scans)')
    stop.add_argument('--shutdown', help='Stop the Burp server', action='store_true', default=False)
    # stop-scans unused
    stop.add_argument('-s', '--stop-scans', help='Stop the active scan (default)', action='store_true', default=True)

    # I think these should just be implied
    # spider.add_argument('-a', '--add-to-scope', help='Add the URL to the scope if it isn\'t in scope already',
    #                     action='store_true', default=False)
    # scan.add_argument('-a', '--add-to-scope', help='Add the URL to the scope if it isn\'t in scope already',
    #                   action='store_true', default=True)

    # stupid hack to keep a record of the subcommand used
    root.set_defaults(cmd='')
    spider.set_defaults(cmd='spider')
    scan.set_defaults(cmd='scan')
    issues.set_defaults(cmd='issues')
    report.set_defaults(cmd='report')
    sitemap.set_defaults(cmd='sitemap')
    stop.set_defaults(cmd='stop')

    args = root.parse_args()

    # time to actually do stuff
    base_url = args.base or DEFAULT_BASE
    client = BurpClient(base_url)
    # TODO technically can go as a constant but i'd like to clean up other things first
    COMMANDS = {
        'spider': spider_cmd,
        'scan': scan_cmd,
        'stop': stop_cmd,
        # 'target': target_cmd,
        'issues': issues_cmd,
        'sitemap': sitemap_cmd,
        'report': report_cmd
    }

    try:
        # start = datetime.datetime.now()
        cmd = COMMANDS[args.cmd]
        cmd(client, args)
        # print('Done in {}'.format(datetime.datetime.now() - start))
        sys.exit(0)  # because of finally at the end
    except KeyError:
        root.print_help()
    except BurpAPIError as e:
        print(e)
    except requests.exceptions.ConnectionError:
        print('Couldn\'t connect to the Burp server at {}.\n'
              'Is it running?'.format(base_url))
    except Exception as e:
        print(e)
    finally:
        sys.exit(1)
